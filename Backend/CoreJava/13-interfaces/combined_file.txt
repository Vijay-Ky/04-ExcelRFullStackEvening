<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 1</h3>
<pre class="prettyprint linenums">
abstract interface A
{
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 2</h3>
<pre class="prettyprint linenums">
interface B
{
    int i = 0;
	static int j = 10;
	public int k = 10;
	final int l = 10;

	void test1();
	public void test2();
	abstract void test3();
	public abstract void test4();
	abstract public void test5();
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 3</h3>
<pre class="prettyprint linenums">
class C
{
}
abstract class D
{
}
interface E
{
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 4</h3>
<pre class="prettyprint linenums">
interface F
{
    int test1();
    void test2();
    byte test3();
    String test4();
    boolean test5();
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 5</h3>
<pre class="prettyprint linenums">
interface G
{
	void test()
	{
	}
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 6</h3>
<pre class="prettyprint linenums">
interface H
{
   H()
   {
   }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 7</h3>
<pre class="prettyprint linenums">
interface I
{
   {
   }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 8</h3>
<pre class="prettyprint linenums">
interface J
{
   static
   {
   }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 9</h3>
<pre class="prettyprint linenums">
interface K
{
    void test1();
}
class L implements K
{
    public void test1()
    {
        System.out.println("from L.test1()");
    }

    public static void main(String[] args)
    {
        //for the interface we cant create an object
        //K obj1 = new K();
        K obj1 = null;
        K obj2 = new L();
        obj2.test1();
        System.out.println("done");
    }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 10</h3>
<pre class="prettyprint linenums">
interface M
{
    void test1();
    int test2(int i);
}
class N implements M
{
    public void test1()
    {
        System.out.println("from test1()");
    }

    public int test2(int i)
    {
        System.out.println("from test2(int)");
        return 0;
    }

    public static void main(String[] args)
    {
        N obj = new N();
        obj.test1();
        obj.test2(10);
    }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 11</h3>
<pre class="prettyprint linenums">
interface O
{
    int i;
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 12</h3>
<pre class="prettyprint linenums">
interface S
{
    void test1();
}
interface T
{
    void test2();
}
class U implements S, T
{
    public void test1()
    {
        System.out.println("from test1()");
    }

    public void test2()
    {
        System.out.println("from test2()");
    }

    public static void main(String[] args)
    {
        U obj = new U();
        obj.test1();
        obj.test2();
    }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 13</h3>
<pre class="prettyprint linenums">
interface A
{
    void test1();
}
interface B
{
    void test2();
}
interface C
{
    void test3();
}
interface D
{
    void test4();
}
class V implements A, B, C, D
{

    public void test1()
    {
        System.out.println("test1()");
    }

    public void test2()
    {
        System.out.println("test2()");
    }

    public void test3()
    {
        System.out.println("test3()");
    }

    public void test4()
    {
        System.out.println("test4()");
    }

    public static void main(String[] args)
    {
        V obj = new V();
        obj.test1();
        obj.test2();
        obj.test3();
        obj.test4();
    }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
<article class="topic">
<h3 class="topic-title" id="introduction">Example No. 14</h3>
<pre class="prettyprint linenums">
interface A
{
    void test1();
}
interface B
{
    void test2();
}
interface C
{
    void test3();
}
abstract class D implements A, B, C
{
    public void test1()
    {
        System.out.println("from test1()");
    }

    public void test2()
    {
        System.out.println("from test2()");
    }
}
class W extends D
{
    public void test3()
    {
        System.out.println("from test3()");
    }

    public static void main(String[] args)
    {
        W obj = new W();
        obj.test1();
        obj.test2();
        obj.test3();
    }
}
</pre>
<br />
<pre class="output"><b>o/p: </b>
</pre>
<br />
<pre class="output"><b>Explanation: </b>
</pre>
</article>
